//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
   
  }

 

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleDeveloperAssociatedDomains {
      static let ahgipAlternateAppLink = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "ahgip-alternate.app.link") ?? "ahgip-alternate.app.link"
      static let ahgipAppLink = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "ahgip.app.link") ?? "ahgip.app.link"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `Privacy.pdf`.
    static let privacyPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "Privacy", pathExtension: "pdf")
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-Italic.ttf`.
    static let robotoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Italic", pathExtension: "ttf")
    /// Resource file `Roboto-Light.ttf`.
    static let robotoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Light", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    /// Resource file `Terms.pdf`.
    static let termsPdf = Rswift.FileResource(bundle: R.hostingBundle, name: "Terms", pathExtension: "pdf")
    /// Resource file `loading.gif`.
    static let loadingGif = Rswift.FileResource(bundle: R.hostingBundle, name: "loading", pathExtension: "gif")

    /// `bundle.url(forResource: "Privacy", withExtension: "pdf")`
    static func privacyPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.privacyPdf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Italic", withExtension: "ttf")`
    static func robotoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Light", withExtension: "ttf")`
    static func robotoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Terms", withExtension: "pdf")`
    static func termsPdf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.termsPdf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading", withExtension: "gif")`
    static func loadingGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loadingGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 5 fonts.
  struct font: Rswift.Validatable {
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")

    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }

    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }

    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }

    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }

    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }

    static func validate() throws {
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 32 images.
  struct image {
    /// Image `App Logo`.
    static let appLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "App Logo")
    /// Image `Ellipse`.
    static let ellipse = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse")
    /// Image `FlickLogo`.
    static let flickLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "FlickLogo")
    /// Image `Flick`.
    static let flick = Rswift.ImageResource(bundle: R.hostingBundle, name: "Flick")
    /// Image `Share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "Share")
    /// Image `Shipping`.
    static let shipping = Rswift.ImageResource(bundle: R.hostingBundle, name: "Shipping")
    /// Image `Vector`.
    static let vector = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector")
    /// Image `back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "back")
    /// Image `boy`.
    static let boy = Rswift.ImageResource(bundle: R.hostingBundle, name: "boy")
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `cloth`.
    static let cloth = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloth")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `done`.
    static let done = Rswift.ImageResource(bundle: R.hostingBundle, name: "done")
    /// Image `dropdown`.
    static let dropdown = Rswift.ImageResource(bundle: R.hostingBundle, name: "dropdown")
    /// Image `flag`.
    static let flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag")
    /// Image `gray_line`.
    static let gray_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "gray_line")
    /// Image `greenArrow`.
    static let greenArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenArrow")
    /// Image `green`.
    static let green = Rswift.ImageResource(bundle: R.hostingBundle, name: "green")
    /// Image `ic_outline-swipe`.
    static let ic_outlineSwipe = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_outline-swipe")
    /// Image `info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "info")
    /// Image `key`.
    static let key = Rswift.ImageResource(bundle: R.hostingBundle, name: "key")
    /// Image `left`.
    static let left = Rswift.ImageResource(bundle: R.hostingBundle, name: "left")
    /// Image `loading.gif`.
    static let loadingGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading.gif")
    /// Image `noOverlayImage`.
    static let noOverlayImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "noOverlayImage")
    /// Image `no`.
    static let no = Rswift.ImageResource(bundle: R.hostingBundle, name: "no")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `redArrow`.
    static let redArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "redArrow")
    /// Image `red`.
    static let red = Rswift.ImageResource(bundle: R.hostingBundle, name: "red")
    /// Image `right-1`.
    static let right1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-1")
    /// Image `right`.
    static let right = Rswift.ImageResource(bundle: R.hostingBundle, name: "right")
    /// Image `yesOverlayImage`.
    static let yesOverlayImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "yesOverlayImage")
    /// Image `yes`.
    static let yes = Rswift.ImageResource(bundle: R.hostingBundle, name: "yes")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "App Logo", bundle: ..., traitCollection: ...)`
    static func appLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse", bundle: ..., traitCollection: ...)`
    static func ellipse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Flick", bundle: ..., traitCollection: ...)`
    static func flick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FlickLogo", bundle: ..., traitCollection: ...)`
    static func flickLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flickLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Shipping", bundle: ..., traitCollection: ...)`
    static func shipping(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shipping, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector", bundle: ..., traitCollection: ...)`
    static func vector(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "boy", bundle: ..., traitCollection: ...)`
    static func boy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloth", bundle: ..., traitCollection: ...)`
    static func cloth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloth, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "done", bundle: ..., traitCollection: ...)`
    static func done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.done, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dropdown", bundle: ..., traitCollection: ...)`
    static func dropdown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dropdown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flag", bundle: ..., traitCollection: ...)`
    static func flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gray_line", bundle: ..., traitCollection: ...)`
    static func gray_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gray_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "green", bundle: ..., traitCollection: ...)`
    static func green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greenArrow", bundle: ..., traitCollection: ...)`
    static func greenArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_outline-swipe", bundle: ..., traitCollection: ...)`
    static func ic_outlineSwipe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_outlineSwipe, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "key", bundle: ..., traitCollection: ...)`
    static func key(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.key, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "left", bundle: ..., traitCollection: ...)`
    static func left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loading.gif", bundle: ..., traitCollection: ...)`
    static func loadingGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadingGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no", bundle: ..., traitCollection: ...)`
    static func no(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noOverlayImage", bundle: ..., traitCollection: ...)`
    static func noOverlayImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noOverlayImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "red", bundle: ..., traitCollection: ...)`
    static func red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "redArrow", bundle: ..., traitCollection: ...)`
    static func redArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right", bundle: ..., traitCollection: ...)`
    static func right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right-1", bundle: ..., traitCollection: ...)`
    static func right1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yes", bundle: ..., traitCollection: ...)`
    static func yes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yesOverlayImage", bundle: ..., traitCollection: ...)`
    static func yesOverlayImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yesOverlayImage, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `Header`.
    static let header: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "Header")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 188 localization keys.
    struct localizable {
      /// en translation: MM/YY
      ///
      /// Locales: en
      static let exp = Rswift.StringResource(key: "exp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: (3% Stripe Fees)
      ///
      /// Locales: en
      static let stripeFees = Rswift.StringResource(key: "stripe fees", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: (How you get paid)
      ///
      /// Locales: en
      static let howYouGetPaid = Rswift.StringResource(key: "howYouGetPaid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: (in)
      ///
      /// Locales: en
      static let `in` = Rswift.StringResource(key: "in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: (oz)
      ///
      /// Locales: en
      static let oz = Rswift.StringResource(key: "oz", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 1. Package item securely 2. Clearly copy shipping info exactly as shown 3. Mail at local post office 4. Click “Complete Order”
      ///
      /// Locales: en
      static let instruction_details = Rswift.StringResource(key: "instruction_details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 9.99,19.99,29.99,39.99,49.99,59.99,69.99,79.99,89.99,99.99
      ///
      /// Locales: en
      static let price_array = Rswift.StringResource(key: "price_array", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ?
      ///
      /// Locales: en
      static let question_mark = Rswift.StringResource(key: "question_mark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add Products
      ///
      /// Locales: en
      static let addProducts = Rswift.StringResource(key: "add Products", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Add your first products!
      ///
      /// Locales: en
      static let addYourFirstProducts = Rswift.StringResource(key: "add your first products", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en
      static let address = Rswift.StringResource(key: "address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Already have an account?
      ///
      /// Locales: en
      static let alreadyHaveAnAccount = Rswift.StringResource(key: "already have an account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Apple Pay
      ///
      /// Locales: en
      static let applePay = Rswift.StringResource(key: "apple pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Are you sure do you want to report this product?
      ///
      /// Locales: en
      static let areYouSureDoYouWantToReportThisProduct = Rswift.StringResource(key: "are you sure do you want to report this product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Bank Account
      ///
      /// Locales: en
      static let bank_account = Rswift.StringResource(key: "bank_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Brand
      ///
      /// Locales: en
      static let brand = Rswift.StringResource(key: "Brand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Brand A,Brand B,Brand C,Brand D,Brand E,Brand F,Brand G
      ///
      /// Locales: en
      static let brand_array = Rswift.StringResource(key: "brand_array", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Browse or Take Photo
      ///
      /// Locales: en
      static let browseOrTakePhoto = Rswift.StringResource(key: "browse or take photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Buy
      ///
      /// Locales: en
      static let buy = Rswift.StringResource(key: "buy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Buy Now
      ///
      /// Locales: en
      static let buy_now = Rswift.StringResource(key: "buy_now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: By tapping “Log in”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy
      ///
      /// Locales: en
      static let byTappingLogInYouAgreeToTheFlickTermsOfServiceAndAcknowledgeTheFlickPrivacyPolicy = Rswift.StringResource(key: "by tapping “log in”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: By tapping “Sign up”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy
      ///
      /// Locales: en
      static let byTappingSignUpYouAgreeToTheFlickTermsOfServiceAndAcknowledgeTheFlickPrivacyPolicy = Rswift.StringResource(key: "by tapping “Sign up”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: CVV
      ///
      /// Locales: en
      static let cvv = Rswift.StringResource(key: "cvv", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel Order
      ///
      /// Locales: en
      static let cancel_order = Rswift.StringResource(key: "cancel_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancelled Orders
      ///
      /// Locales: en
      static let cancelled_order = Rswift.StringResource(key: "cancelled_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Card Number
      ///
      /// Locales: en
      static let cardNumber = Rswift.StringResource(key: "card number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Card details saved successfully
      ///
      /// Locales: en
      static let card_details_saved = Rswift.StringResource(key: "card_details_saved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cardholder Name
      ///
      /// Locales: en
      static let cardholderName = Rswift.StringResource(key: "cardholder name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Category
      ///
      /// Locales: en
      static let category = Rswift.StringResource(key: "category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: City
      ///
      /// Locales: en
      static let city = Rswift.StringResource(key: "city", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Closet Information:
      ///
      /// Locales: en
      static let closet_information = Rswift.StringResource(key: "closet_information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Closet Name
      ///
      /// Locales: en
      static let closetName = Rswift.StringResource(key: "closetName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Color
      ///
      /// Locales: en
      static let color = Rswift.StringResource(key: "color", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Complete Order
      ///
      /// Locales: en
      static let complete_order = Rswift.StringResource(key: "complete_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en
      static let confirm = Rswift.StringResource(key: "confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en
      static let confirmPassword = Rswift.StringResource(key: "confirm password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Congratulations! Your closet has been setup!
      ///
      /// Locales: en
      static let congratulationsYourClosetHasBeenSetup = Rswift.StringResource(key: "congratulations your closet has been setup!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Congratulations! Your order has been placed successfully.
      ///
      /// Locales: en
      static let orderPlaced = Rswift.StringResource(key: "order placed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Connecting from Flick iOS App
      ///
      /// Locales: en
      static let mail_subject = Rswift.StringResource(key: "mail_subject", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Contact
      ///
      /// Locales: en
      static let contact = Rswift.StringResource(key: "contact", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Contact Buyer
      ///
      /// Locales: en
      static let contact_buyer = Rswift.StringResource(key: "contact_buyer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Contact Seller
      ///
      /// Locales: en
      static let contactSeller = Rswift.StringResource(key: "contact seller", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Credit/Debit Card
      ///
      /// Locales: en
      static let creditDebit_card = Rswift.StringResource(key: "credit/debit_card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Current password
      ///
      /// Locales: en
      static let currentPassword = Rswift.StringResource(key: "current password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en
      static let delete = Rswift.StringResource(key: "delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Deleted successfully
      ///
      /// Locales: en
      static let deletedSuccessfully = Rswift.StringResource(key: "deleted successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Descriptions
      ///
      /// Locales: en
      static let description = Rswift.StringResource(key: "description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Do you want to delete
      ///
      /// Locales: en
      static let doYouWantToDelete = Rswift.StringResource(key: "do you want to delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Do you want to delete this card?
      ///
      /// Locales: en
      static let delete_card = Rswift.StringResource(key: "delete_card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Don’t have an account?
      ///
      /// Locales: en
      static let donTHaveAnAccount = Rswift.StringResource(key: "don’t have an account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en
      static let edit = Rswift.StringResource(key: "edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Edit Payment Settings
      ///
      /// Locales: en
      static let editPaymentSetting = Rswift.StringResource(key: "edit payment setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email Address
      ///
      /// Locales: en
      static let emailAddress = Rswift.StringResource(key: "emailAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter Credit Card
      ///
      /// Locales: en
      static let enterCreditCard = Rswift.StringResource(key: "enter Credit Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter OTP
      ///
      /// Locales: en
      static let enter_otp = Rswift.StringResource(key: "enter_otp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter Shipping Information
      ///
      /// Locales: en
      static let enterShippingInformation = Rswift.StringResource(key: "enter Shipping Information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter reason
      ///
      /// Locales: en
      static let enterReason = Rswift.StringResource(key: "enter reason", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter some basic information to start selling!
      ///
      /// Locales: en
      static let enterSomeBasicInformationToStartSelling = Rswift.StringResource(key: "enter some basic information to start selling!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Faster checkout:
      ///
      /// Locales: en
      static let fasterCheckout = Rswift.StringResource(key: "faster checkout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Female
      ///
      /// Locales: en
      static let female = Rswift.StringResource(key: "female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en
      static let firstName = Rswift.StringResource(key: "firstName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Flick - Buy & Sell
      ///
      /// Locales: en
      static let app_name = Rswift.StringResource(key: "app_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static let forgotYourPassword = Rswift.StringResource(key: "forgot your password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Free Shipping
      ///
      /// Locales: en
      static let freeShpping = Rswift.StringResource(key: "free shpping", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Gender
      ///
      /// Locales: en
      static let gender = Rswift.StringResource(key: "gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Height
      ///
      /// Locales: en
      static let height = Rswift.StringResource(key: "height", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en
      static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: I'm Looking For
      ///
      /// Locales: en
      static let iMLookingFor = Rswift.StringResource(key: "i'm looking for", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Instructions
      ///
      /// Locales: en
      static let instructions = Rswift.StringResource(key: "instructions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en
      static let lastName = Rswift.StringResource(key: "lastName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Length
      ///
      /// Locales: en
      static let length = Rswift.StringResource(key: "length", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Listings
      ///
      /// Locales: en
      static let listings = Rswift.StringResource(key: "listings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en
      static let location = Rswift.StringResource(key: "location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en
      static let login = Rswift.StringResource(key: "login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en
      static let logout = Rswift.StringResource(key: "logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Make Payment
      ///
      /// Locales: en
      static let makePayment = Rswift.StringResource(key: "make payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Make ready for Sell
      ///
      /// Locales: en
      static let makeReadyForSell = Rswift.StringResource(key: "make ready for sell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Male
      ///
      /// Locales: en
      static let male = Rswift.StringResource(key: "male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Mark as Sold
      ///
      /// Locales: en
      static let markAsSold = Rswift.StringResource(key: "mark as sold", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: My Account
      ///
      /// Locales: en
      static let myAccount = Rswift.StringResource(key: "myAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: My Closet
      ///
      /// Locales: en
      static let myCloset = Rswift.StringResource(key: "myCloset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: My Likes
      ///
      /// Locales: en
      static let myLikes = Rswift.StringResource(key: "myLikes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en
      static let name = Rswift.StringResource(key: "name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: New password
      ///
      /// Locales: en
      static let newPassword = Rswift.StringResource(key: "new password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No bank account available. Once you will add bank account they will appear here.
      ///
      /// Locales: en
      static let no_bank_account_available = Rswift.StringResource(key: "no_bank_account_available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No credit/debit cards available. Once you will add credit/debit cards they will appear here.
      ///
      /// Locales: en
      static let no_creditDebit_available = Rswift.StringResource(key: "no_credit/debit_available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No default account available
      ///
      /// Locales: en
      static let noDefaultAccountAvailable = Rswift.StringResource(key: "no default account available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No default card available
      ///
      /// Locales: en
      static let noDefaultCardAvailable = Rswift.StringResource(key: "no default card available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No product available for your preference, once product will be available they will appear here.
      ///
      /// Locales: en
      static let no_product_available = Rswift.StringResource(key: "no_product_available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Not now
      ///
      /// Locales: en
      static let noNow = Rswift.StringResource(key: "no now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OTP
      ///
      /// Locales: en
      static let otp = Rswift.StringResource(key: "otp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Of
      ///
      /// Locales: en
      static let of = Rswift.StringResource(key: "of", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Order Cancelled
      ///
      /// Locales: en
      static let order_cancelled = Rswift.StringResource(key: "order_cancelled", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Order Completed
      ///
      /// Locales: en
      static let order_completed = Rswift.StringResource(key: "order_completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Order Total
      ///
      /// Locales: en
      static let orderTotal = Rswift.StringResource(key: "orderTotal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Package Info
      ///
      /// Locales: en
      static let package_info = Rswift.StringResource(key: "package_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password and confirm password not match
      ///
      /// Locales: en
      static let passwordNotMatch = Rswift.StringResource(key: "password not match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pay
      ///
      /// Locales: en
      static let pay = Rswift.StringResource(key: "pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Payment
      ///
      /// Locales: en
      static let payment = Rswift.StringResource(key: "payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Payment Method
      ///
      /// Locales: en
      static let paymentMethod = Rswift.StringResource(key: "paymentMethod", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Payment Pending
      ///
      /// Locales: en
      static let paymentPending = Rswift.StringResource(key: "payment pending", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Payment Received
      ///
      /// Locales: en
      static let paymentReceived = Rswift.StringResource(key: "payment received", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Payment Sent
      ///
      /// Locales: en
      static let payment_sent = Rswift.StringResource(key: "payment_sent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Payment setting:
      ///
      /// Locales: en
      static let paymentSetting = Rswift.StringResource(key: "payment setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pending Orders
      ///
      /// Locales: en
      static let pendingOrders = Rswift.StringResource(key: "pending orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Personal Information
      ///
      /// Locales: en
      static let personalInformation = Rswift.StringResource(key: "personalInformation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Phone
      ///
      /// Locales: en
      static let phone = Rswift.StringResource(key: "phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please check your device has internet connection and try again.
      ///
      /// Locales: en
      static let no_internet = Rswift.StringResource(key: "no_internet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please connect your stripe account first to start selling product on app
      ///
      /// Locales: en
      static let pleaseConnectStripe = Rswift.StringResource(key: "please connect stripe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter
      ///
      /// Locales: en
      static let pleaseEnter = Rswift.StringResource(key: "please enter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter OTP sent to your email:
      ///
      /// Locales: en
      static let pleaseEnterOtp = Rswift.StringResource(key: "please enter otp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter minimum 50 characters for product description
      ///
      /// Locales: en
      static let please_enter_description = Rswift.StringResource(key: "please_enter_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter valid card details
      ///
      /// Locales: en
      static let enterValidCardDetails = Rswift.StringResource(key: "enter valid card details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please enter valid email address
      ///
      /// Locales: en
      static let pleaseEnterValidEmail = Rswift.StringResource(key: "please enter valid email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please provide shipping information
      ///
      /// Locales: en
      static let pleaseFillShippingInformations = Rswift.StringResource(key: "please fill shipping informations", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please provide your valuable feedback for this seller this will helps seller to impove their products/services
      ///
      /// Locales: en
      static let pleaseProvideFeedback = Rswift.StringResource(key: "Please provide feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please select product image before saving product
      ///
      /// Locales: en
      static let please_select_image = Rswift.StringResource(key: "please_select_image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please select shipping type
      ///
      /// Locales: en
      static let pleaseSelectShippingType = Rswift.StringResource(key: "please select shipping type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please select valid
      ///
      /// Locales: en
      static let pleaseSelect = Rswift.StringResource(key: "please select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please setup mail account in Mail app and try again
      ///
      /// Locales: en
      static let mail_error_message = Rswift.StringResource(key: "mail_error_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Preferred Bank:
      ///
      /// Locales: en
      static let preferredBank = Rswift.StringResource(key: "preferred bank", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Preferred Card:
      ///
      /// Locales: en
      static let preferredCard = Rswift.StringResource(key: "preferred card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Price
      ///
      /// Locales: en
      static let price = Rswift.StringResource(key: "price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Primary card
      ///
      /// Locales: en
      static let primaryCard = Rswift.StringResource(key: "primary card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Print Shipping Label
      ///
      /// Locales: en
      static let printShippingLabel = Rswift.StringResource(key: "print shipping label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static let privacyPolicy = Rswift.StringResource(key: "privacy policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Product
      ///
      /// Locales: en
      static let product = Rswift.StringResource(key: "product", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Purchased
      ///
      /// Locales: en
      static let purchased = Rswift.StringResource(key: "purchased", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Purchased Items
      ///
      /// Locales: en
      static let purchasedItems = Rswift.StringResource(key: "purchased items", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Re-Print Shipping Label
      ///
      /// Locales: en
      static let rePrintShippingLabel = Rswift.StringResource(key: "re-print shipping label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Red,Green,Blue,Orange,Purple,White,Black,Blue,Navy Blue,Dark Green
      ///
      /// Locales: en
      static let color_array = Rswift.StringResource(key: "color_array", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Remember for future purchases
      ///
      /// Locales: en
      static let rememberForFuturePurchases = Rswift.StringResource(key: "remember for future purchases", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Remember password?
      ///
      /// Locales: en
      static let rememberPassword = Rswift.StringResource(key: "remember password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Report
      ///
      /// Locales: en
      static let report = Rswift.StringResource(key: "report", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Resend OTP
      ///
      /// Locales: en
      static let resend_OTP = Rswift.StringResource(key: "resend_OTP", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en
      static let select = Rswift.StringResource(key: "select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select Category
      ///
      /// Locales: en
      static let select_category = Rswift.StringResource(key: "select_category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select Shipping Type
      ///
      /// Locales: en
      static let selectShippingType = Rswift.StringResource(key: "select shipping type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select Size
      ///
      /// Locales: en
      static let select_size = Rswift.StringResource(key: "select_size", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select from Photo Library
      ///
      /// Locales: en
      static let selectFromPhotoLibrary = Rswift.StringResource(key: "Select from Photo Library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select saved address
      ///
      /// Locales: en
      static let selectSavedAddress = Rswift.StringResource(key: "select saved address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sell
      ///
      /// Locales: en
      static let sell = Rswift.StringResource(key: "sell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Service Fee
      ///
      /// Locales: en
      static let serviceFee = Rswift.StringResource(key: "service fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Set as primary card
      ///
      /// Locales: en
      static let setPrimaryCard = Rswift.StringResource(key: "set primary card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Setup Apple Pay
      ///
      /// Locales: en
      static let setupApplePay = Rswift.StringResource(key: "setup apple pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Setup Closet
      ///
      /// Locales: en
      static let setup_closet = Rswift.StringResource(key: "setup_closet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en
      static let share = Rswift.StringResource(key: "share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Shared from
      ///
      /// Locales: en
      static let shared_from = Rswift.StringResource(key: "shared_from", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Shipped
      ///
      /// Locales: en
      static let shipped = Rswift.StringResource(key: "shipped", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Shipping
      ///
      /// Locales: en
      static let shipping = Rswift.StringResource(key: "shipping", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Shipping Included
      ///
      /// Locales: en
      static let shipping_included = Rswift.StringResource(key: "shipping_included", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Shipping Info
      ///
      /// Locales: en
      static let shippingInfo = Rswift.StringResource(key: "shipping info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Shipping Info
      ///
      /// Locales: en
      static let shipping_info = Rswift.StringResource(key: "shipping_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Shipping Type
      ///
      /// Locales: en
      static let shippingType = Rswift.StringResource(key: "shipping type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Shipping address updated successfully
      ///
      /// Locales: en
      static let addressUpdatedSuccessfully = Rswift.StringResource(key: "address updated successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign Up
      ///
      /// Locales: en
      static let signUp = Rswift.StringResource(key: "sign up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Size
      ///
      /// Locales: en
      static let size = Rswift.StringResource(key: "size", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Size(s)
      ///
      /// Locales: en
      static let sizeS = Rswift.StringResource(key: "size(s)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sold
      ///
      /// Locales: en
      static let sold = Rswift.StringResource(key: "sold", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sold items
      ///
      /// Locales: en
      static let soldItems = Rswift.StringResource(key: "soldItems", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: State
      ///
      /// Locales: en
      static let state = Rswift.StringResource(key: "state", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Stripe account linked successfully
      ///
      /// Locales: en
      static let stripeAccountLinked = Rswift.StringResource(key: "stripe account linked", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en
      static let submit = Rswift.StringResource(key: "submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Take a Picture
      ///
      /// Locales: en
      static let takeAPicture = Rswift.StringResource(key: "Take a Picture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Terms of Service
      ///
      /// Locales: en
      static let termsOfService = Rswift.StringResource(key: "terms of service", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en
      static let total = Rswift.StringResource(key: "total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Upload Photo
      ///
      /// Locales: en
      static let uploadPhoto = Rswift.StringResource(key: "upload photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Verify Email
      ///
      /// Locales: en
      static let verifyEmail = Rswift.StringResource(key: "verify email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Verify OTP
      ///
      /// Locales: en
      static let verifyOTP = Rswift.StringResource(key: "verify OTP", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: View Order
      ///
      /// Locales: en
      static let view_order = Rswift.StringResource(key: "view_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Waiting for payment
      ///
      /// Locales: en
      static let waitingForPayment = Rswift.StringResource(key: "waiting for payment", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Waiting to ship
      ///
      /// Locales: en
      static let waitingToShip = Rswift.StringResource(key: "waiting to ship", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Weight
      ///
      /// Locales: en
      static let weight = Rswift.StringResource(key: "weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Width
      ///
      /// Locales: en
      static let width = Rswift.StringResource(key: "width", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Women's,Men's,Juniors,Kids,Babies
      ///
      /// Locales: en
      static let gender_array = Rswift.StringResource(key: "gender_array", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: XS,S,M,L,XL,XXL,XXXL,XXXXL
      ///
      /// Locales: en
      static let size_array = Rswift.StringResource(key: "size_array", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Year
      ///
      /// Locales: en
      static let year = Rswift.StringResource(key: "year", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You will receive
      ///
      /// Locales: en
      static let youWillReceive = Rswift.StringResource(key: "you will receive", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your user session has been expired please login again to continue using App.
      ///
      /// Locales: en
      static let session_expired = Rswift.StringResource(key: "session_expired", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Zip
      ///
      /// Locales: en
      static let zip = Rswift.StringResource(key: "zip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: ending with
      ///
      /// Locales: en
      static let endingWith = Rswift.StringResource(key: "endingWith", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: month
      ///
      /// Locales: en
      static let month = Rswift.StringResource(key: "month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: MM/YY
      ///
      /// Locales: en
      static func exp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("exp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "exp"
        }

        return NSLocalizedString("exp", bundle: bundle, comment: "")
      }

      /// en translation: (3% Stripe Fees)
      ///
      /// Locales: en
      static func stripeFees(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stripe fees", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "stripe fees"
        }

        return NSLocalizedString("stripe fees", bundle: bundle, comment: "")
      }

      /// en translation: (How you get paid)
      ///
      /// Locales: en
      static func howYouGetPaid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("howYouGetPaid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "howYouGetPaid"
        }

        return NSLocalizedString("howYouGetPaid", bundle: bundle, comment: "")
      }

      /// en translation: (in)
      ///
      /// Locales: en
      static func `in`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "in"
        }

        return NSLocalizedString("in", bundle: bundle, comment: "")
      }

      /// en translation: (oz)
      ///
      /// Locales: en
      static func oz(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oz", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "oz"
        }

        return NSLocalizedString("oz", bundle: bundle, comment: "")
      }

      /// en translation: 1. Package item securely 2. Clearly copy shipping info exactly as shown 3. Mail at local post office 4. Click “Complete Order”
      ///
      /// Locales: en
      static func instruction_details(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("instruction_details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "instruction_details"
        }

        return NSLocalizedString("instruction_details", bundle: bundle, comment: "")
      }

      /// en translation: 9.99,19.99,29.99,39.99,49.99,59.99,69.99,79.99,89.99,99.99
      ///
      /// Locales: en
      static func price_array(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("price_array", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "price_array"
        }

        return NSLocalizedString("price_array", bundle: bundle, comment: "")
      }

      /// en translation: ?
      ///
      /// Locales: en
      static func question_mark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("question_mark", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "question_mark"
        }

        return NSLocalizedString("question_mark", bundle: bundle, comment: "")
      }

      /// en translation: Add Products
      ///
      /// Locales: en
      static func addProducts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add Products", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add Products"
        }

        return NSLocalizedString("add Products", bundle: bundle, comment: "")
      }

      /// en translation: Add your first products!
      ///
      /// Locales: en
      static func addYourFirstProducts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add your first products", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add your first products"
        }

        return NSLocalizedString("add your first products", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "address"
        }

        return NSLocalizedString("address", bundle: bundle, comment: "")
      }

      /// en translation: Already have an account?
      ///
      /// Locales: en
      static func alreadyHaveAnAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("already have an account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "already have an account"
        }

        return NSLocalizedString("already have an account", bundle: bundle, comment: "")
      }

      /// en translation: Apple Pay
      ///
      /// Locales: en
      static func applePay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("apple pay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "apple pay"
        }

        return NSLocalizedString("apple pay", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure do you want to report this product?
      ///
      /// Locales: en
      static func areYouSureDoYouWantToReportThisProduct(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("are you sure do you want to report this product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "are you sure do you want to report this product"
        }

        return NSLocalizedString("are you sure do you want to report this product", bundle: bundle, comment: "")
      }

      /// en translation: Bank Account
      ///
      /// Locales: en
      static func bank_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bank_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bank_account"
        }

        return NSLocalizedString("bank_account", bundle: bundle, comment: "")
      }

      /// en translation: Brand
      ///
      /// Locales: en
      static func brand(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Brand", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Brand"
        }

        return NSLocalizedString("Brand", bundle: bundle, comment: "")
      }

      /// en translation: Brand A,Brand B,Brand C,Brand D,Brand E,Brand F,Brand G
      ///
      /// Locales: en
      static func brand_array(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("brand_array", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "brand_array"
        }

        return NSLocalizedString("brand_array", bundle: bundle, comment: "")
      }

      /// en translation: Browse or Take Photo
      ///
      /// Locales: en
      static func browseOrTakePhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("browse or take photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "browse or take photo"
        }

        return NSLocalizedString("browse or take photo", bundle: bundle, comment: "")
      }

      /// en translation: Buy
      ///
      /// Locales: en
      static func buy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buy"
        }

        return NSLocalizedString("buy", bundle: bundle, comment: "")
      }

      /// en translation: Buy Now
      ///
      /// Locales: en
      static func buy_now(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("buy_now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "buy_now"
        }

        return NSLocalizedString("buy_now", bundle: bundle, comment: "")
      }

      /// en translation: By tapping “Log in”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy
      ///
      /// Locales: en
      static func byTappingLogInYouAgreeToTheFlickTermsOfServiceAndAcknowledgeTheFlickPrivacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("by tapping “log in”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "by tapping “log in”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy"
        }

        return NSLocalizedString("by tapping “log in”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy", bundle: bundle, comment: "")
      }

      /// en translation: By tapping “Sign up”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy
      ///
      /// Locales: en
      static func byTappingSignUpYouAgreeToTheFlickTermsOfServiceAndAcknowledgeTheFlickPrivacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("by tapping “Sign up”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "by tapping “Sign up”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy"
        }

        return NSLocalizedString("by tapping “Sign up”, you agree to the Flick Terms of Service and acknowledge the Flick Privacy Policy", bundle: bundle, comment: "")
      }

      /// en translation: CVV
      ///
      /// Locales: en
      static func cvv(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cvv", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cvv"
        }

        return NSLocalizedString("cvv", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel Order
      ///
      /// Locales: en
      static func cancel_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel_order"
        }

        return NSLocalizedString("cancel_order", bundle: bundle, comment: "")
      }

      /// en translation: Cancelled Orders
      ///
      /// Locales: en
      static func cancelled_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancelled_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancelled_order"
        }

        return NSLocalizedString("cancelled_order", bundle: bundle, comment: "")
      }

      /// en translation: Card Number
      ///
      /// Locales: en
      static func cardNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card number"
        }

        return NSLocalizedString("card number", bundle: bundle, comment: "")
      }

      /// en translation: Card details saved successfully
      ///
      /// Locales: en
      static func card_details_saved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("card_details_saved", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "card_details_saved"
        }

        return NSLocalizedString("card_details_saved", bundle: bundle, comment: "")
      }

      /// en translation: Cardholder Name
      ///
      /// Locales: en
      static func cardholderName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cardholder name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cardholder name"
        }

        return NSLocalizedString("cardholder name", bundle: bundle, comment: "")
      }

      /// en translation: Category
      ///
      /// Locales: en
      static func category(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "category"
        }

        return NSLocalizedString("category", bundle: bundle, comment: "")
      }

      /// en translation: City
      ///
      /// Locales: en
      static func city(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("city", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "city"
        }

        return NSLocalizedString("city", bundle: bundle, comment: "")
      }

      /// en translation: Closet Information:
      ///
      /// Locales: en
      static func closet_information(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("closet_information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "closet_information"
        }

        return NSLocalizedString("closet_information", bundle: bundle, comment: "")
      }

      /// en translation: Closet Name
      ///
      /// Locales: en
      static func closetName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("closetName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "closetName"
        }

        return NSLocalizedString("closetName", bundle: bundle, comment: "")
      }

      /// en translation: Color
      ///
      /// Locales: en
      static func color(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("color", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "color"
        }

        return NSLocalizedString("color", bundle: bundle, comment: "")
      }

      /// en translation: Complete Order
      ///
      /// Locales: en
      static func complete_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("complete_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "complete_order"
        }

        return NSLocalizedString("complete_order", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm"
        }

        return NSLocalizedString("confirm", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm password"
        }

        return NSLocalizedString("confirm password", bundle: bundle, comment: "")
      }

      /// en translation: Congratulations! Your closet has been setup!
      ///
      /// Locales: en
      static func congratulationsYourClosetHasBeenSetup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("congratulations your closet has been setup!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "congratulations your closet has been setup!"
        }

        return NSLocalizedString("congratulations your closet has been setup!", bundle: bundle, comment: "")
      }

      /// en translation: Congratulations! Your order has been placed successfully.
      ///
      /// Locales: en
      static func orderPlaced(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("order placed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "order placed"
        }

        return NSLocalizedString("order placed", bundle: bundle, comment: "")
      }

      /// en translation: Connecting from Flick iOS App
      ///
      /// Locales: en
      static func mail_subject(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mail_subject", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mail_subject"
        }

        return NSLocalizedString("mail_subject", bundle: bundle, comment: "")
      }

      /// en translation: Contact
      ///
      /// Locales: en
      static func contact(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("contact", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "contact"
        }

        return NSLocalizedString("contact", bundle: bundle, comment: "")
      }

      /// en translation: Contact Buyer
      ///
      /// Locales: en
      static func contact_buyer(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("contact_buyer", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "contact_buyer"
        }

        return NSLocalizedString("contact_buyer", bundle: bundle, comment: "")
      }

      /// en translation: Contact Seller
      ///
      /// Locales: en
      static func contactSeller(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("contact seller", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "contact seller"
        }

        return NSLocalizedString("contact seller", bundle: bundle, comment: "")
      }

      /// en translation: Credit/Debit Card
      ///
      /// Locales: en
      static func creditDebit_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("credit/debit_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "credit/debit_card"
        }

        return NSLocalizedString("credit/debit_card", bundle: bundle, comment: "")
      }

      /// en translation: Current password
      ///
      /// Locales: en
      static func currentPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("current password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "current password"
        }

        return NSLocalizedString("current password", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete"
        }

        return NSLocalizedString("delete", bundle: bundle, comment: "")
      }

      /// en translation: Deleted successfully
      ///
      /// Locales: en
      static func deletedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deleted successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deleted successfully"
        }

        return NSLocalizedString("deleted successfully", bundle: bundle, comment: "")
      }

      /// en translation: Descriptions
      ///
      /// Locales: en
      static func description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "description"
        }

        return NSLocalizedString("description", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to delete
      ///
      /// Locales: en
      static func doYouWantToDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("do you want to delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "do you want to delete"
        }

        return NSLocalizedString("do you want to delete", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to delete this card?
      ///
      /// Locales: en
      static func delete_card(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete_card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "delete_card"
        }

        return NSLocalizedString("delete_card", bundle: bundle, comment: "")
      }

      /// en translation: Don’t have an account?
      ///
      /// Locales: en
      static func donTHaveAnAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("don’t have an account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "don’t have an account"
        }

        return NSLocalizedString("don’t have an account", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en
      static func edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit"
        }

        return NSLocalizedString("edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit Payment Settings
      ///
      /// Locales: en
      static func editPaymentSetting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit payment setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit payment setting"
        }

        return NSLocalizedString("edit payment setting", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", bundle: bundle, comment: "")
      }

      /// en translation: Email Address
      ///
      /// Locales: en
      static func emailAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailAddress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailAddress"
        }

        return NSLocalizedString("emailAddress", bundle: bundle, comment: "")
      }

      /// en translation: Enter Credit Card
      ///
      /// Locales: en
      static func enterCreditCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter Credit Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter Credit Card"
        }

        return NSLocalizedString("enter Credit Card", bundle: bundle, comment: "")
      }

      /// en translation: Enter OTP
      ///
      /// Locales: en
      static func enter_otp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter_otp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter_otp"
        }

        return NSLocalizedString("enter_otp", bundle: bundle, comment: "")
      }

      /// en translation: Enter Shipping Information
      ///
      /// Locales: en
      static func enterShippingInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter Shipping Information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter Shipping Information"
        }

        return NSLocalizedString("enter Shipping Information", bundle: bundle, comment: "")
      }

      /// en translation: Enter reason
      ///
      /// Locales: en
      static func enterReason(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter reason", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter reason"
        }

        return NSLocalizedString("enter reason", bundle: bundle, comment: "")
      }

      /// en translation: Enter some basic information to start selling!
      ///
      /// Locales: en
      static func enterSomeBasicInformationToStartSelling(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter some basic information to start selling!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter some basic information to start selling!"
        }

        return NSLocalizedString("enter some basic information to start selling!", bundle: bundle, comment: "")
      }

      /// en translation: Faster checkout:
      ///
      /// Locales: en
      static func fasterCheckout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("faster checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "faster checkout"
        }

        return NSLocalizedString("faster checkout", bundle: bundle, comment: "")
      }

      /// en translation: Female
      ///
      /// Locales: en
      static func female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "female"
        }

        return NSLocalizedString("female", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en
      static func firstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "firstName"
        }

        return NSLocalizedString("firstName", bundle: bundle, comment: "")
      }

      /// en translation: Flick - Buy & Sell
      ///
      /// Locales: en
      static func app_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_name"
        }

        return NSLocalizedString("app_name", bundle: bundle, comment: "")
      }

      /// en translation: Forgot your password?
      ///
      /// Locales: en
      static func forgotYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgot your password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgot your password"
        }

        return NSLocalizedString("forgot your password", bundle: bundle, comment: "")
      }

      /// en translation: Free Shipping
      ///
      /// Locales: en
      static func freeShpping(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("free shpping", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "free shpping"
        }

        return NSLocalizedString("free shpping", bundle: bundle, comment: "")
      }

      /// en translation: Gender
      ///
      /// Locales: en
      static func gender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gender", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gender"
        }

        return NSLocalizedString("gender", bundle: bundle, comment: "")
      }

      /// en translation: Height
      ///
      /// Locales: en
      static func height(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("height", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "height"
        }

        return NSLocalizedString("height", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home"
        }

        return NSLocalizedString("home", bundle: bundle, comment: "")
      }

      /// en translation: I'm Looking For
      ///
      /// Locales: en
      static func iMLookingFor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("i'm looking for", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "i'm looking for"
        }

        return NSLocalizedString("i'm looking for", bundle: bundle, comment: "")
      }

      /// en translation: Instructions
      ///
      /// Locales: en
      static func instructions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("instructions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "instructions"
        }

        return NSLocalizedString("instructions", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en
      static func lastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lastName"
        }

        return NSLocalizedString("lastName", bundle: bundle, comment: "")
      }

      /// en translation: Length
      ///
      /// Locales: en
      static func length(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("length", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "length"
        }

        return NSLocalizedString("length", bundle: bundle, comment: "")
      }

      /// en translation: Listings
      ///
      /// Locales: en
      static func listings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("listings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "listings"
        }

        return NSLocalizedString("listings", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en
      static func location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location"
        }

        return NSLocalizedString("location", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login"
        }

        return NSLocalizedString("login", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout"
        }

        return NSLocalizedString("logout", bundle: bundle, comment: "")
      }

      /// en translation: Make Payment
      ///
      /// Locales: en
      static func makePayment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("make payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "make payment"
        }

        return NSLocalizedString("make payment", bundle: bundle, comment: "")
      }

      /// en translation: Make ready for Sell
      ///
      /// Locales: en
      static func makeReadyForSell(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("make ready for sell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "make ready for sell"
        }

        return NSLocalizedString("make ready for sell", bundle: bundle, comment: "")
      }

      /// en translation: Male
      ///
      /// Locales: en
      static func male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "male"
        }

        return NSLocalizedString("male", bundle: bundle, comment: "")
      }

      /// en translation: Mark as Sold
      ///
      /// Locales: en
      static func markAsSold(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mark as sold", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mark as sold"
        }

        return NSLocalizedString("mark as sold", bundle: bundle, comment: "")
      }

      /// en translation: My Account
      ///
      /// Locales: en
      static func myAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myAccount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "myAccount"
        }

        return NSLocalizedString("myAccount", bundle: bundle, comment: "")
      }

      /// en translation: My Closet
      ///
      /// Locales: en
      static func myCloset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myCloset", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "myCloset"
        }

        return NSLocalizedString("myCloset", bundle: bundle, comment: "")
      }

      /// en translation: My Likes
      ///
      /// Locales: en
      static func myLikes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myLikes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "myLikes"
        }

        return NSLocalizedString("myLikes", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "name"
        }

        return NSLocalizedString("name", bundle: bundle, comment: "")
      }

      /// en translation: New password
      ///
      /// Locales: en
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("new password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "new password"
        }

        return NSLocalizedString("new password", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", bundle: bundle, comment: "")
      }

      /// en translation: No bank account available. Once you will add bank account they will appear here.
      ///
      /// Locales: en
      static func no_bank_account_available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_bank_account_available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_bank_account_available"
        }

        return NSLocalizedString("no_bank_account_available", bundle: bundle, comment: "")
      }

      /// en translation: No credit/debit cards available. Once you will add credit/debit cards they will appear here.
      ///
      /// Locales: en
      static func no_creditDebit_available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_credit/debit_available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_credit/debit_available"
        }

        return NSLocalizedString("no_credit/debit_available", bundle: bundle, comment: "")
      }

      /// en translation: No default account available
      ///
      /// Locales: en
      static func noDefaultAccountAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no default account available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no default account available"
        }

        return NSLocalizedString("no default account available", bundle: bundle, comment: "")
      }

      /// en translation: No default card available
      ///
      /// Locales: en
      static func noDefaultCardAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no default card available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no default card available"
        }

        return NSLocalizedString("no default card available", bundle: bundle, comment: "")
      }

      /// en translation: No product available for your preference, once product will be available they will appear here.
      ///
      /// Locales: en
      static func no_product_available(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_product_available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_product_available"
        }

        return NSLocalizedString("no_product_available", bundle: bundle, comment: "")
      }

      /// en translation: Not now
      ///
      /// Locales: en
      static func noNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no now"
        }

        return NSLocalizedString("no now", bundle: bundle, comment: "")
      }

      /// en translation: OTP
      ///
      /// Locales: en
      static func otp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("otp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "otp"
        }

        return NSLocalizedString("otp", bundle: bundle, comment: "")
      }

      /// en translation: Of
      ///
      /// Locales: en
      static func of(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("of", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "of"
        }

        return NSLocalizedString("of", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// en translation: Order Cancelled
      ///
      /// Locales: en
      static func order_cancelled(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("order_cancelled", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "order_cancelled"
        }

        return NSLocalizedString("order_cancelled", bundle: bundle, comment: "")
      }

      /// en translation: Order Completed
      ///
      /// Locales: en
      static func order_completed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("order_completed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "order_completed"
        }

        return NSLocalizedString("order_completed", bundle: bundle, comment: "")
      }

      /// en translation: Order Total
      ///
      /// Locales: en
      static func orderTotal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("orderTotal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "orderTotal"
        }

        return NSLocalizedString("orderTotal", bundle: bundle, comment: "")
      }

      /// en translation: Package Info
      ///
      /// Locales: en
      static func package_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("package_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "package_info"
        }

        return NSLocalizedString("package_info", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", bundle: bundle, comment: "")
      }

      /// en translation: Password and confirm password not match
      ///
      /// Locales: en
      static func passwordNotMatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password not match", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password not match"
        }

        return NSLocalizedString("password not match", bundle: bundle, comment: "")
      }

      /// en translation: Pay
      ///
      /// Locales: en
      static func pay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pay"
        }

        return NSLocalizedString("pay", bundle: bundle, comment: "")
      }

      /// en translation: Payment
      ///
      /// Locales: en
      static func payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment"
        }

        return NSLocalizedString("payment", bundle: bundle, comment: "")
      }

      /// en translation: Payment Method
      ///
      /// Locales: en
      static func paymentMethod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("paymentMethod", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "paymentMethod"
        }

        return NSLocalizedString("paymentMethod", bundle: bundle, comment: "")
      }

      /// en translation: Payment Pending
      ///
      /// Locales: en
      static func paymentPending(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment pending", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment pending"
        }

        return NSLocalizedString("payment pending", bundle: bundle, comment: "")
      }

      /// en translation: Payment Received
      ///
      /// Locales: en
      static func paymentReceived(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment received", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment received"
        }

        return NSLocalizedString("payment received", bundle: bundle, comment: "")
      }

      /// en translation: Payment Sent
      ///
      /// Locales: en
      static func payment_sent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment_sent", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment_sent"
        }

        return NSLocalizedString("payment_sent", bundle: bundle, comment: "")
      }

      /// en translation: Payment setting:
      ///
      /// Locales: en
      static func paymentSetting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("payment setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "payment setting"
        }

        return NSLocalizedString("payment setting", bundle: bundle, comment: "")
      }

      /// en translation: Pending Orders
      ///
      /// Locales: en
      static func pendingOrders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pending orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pending orders"
        }

        return NSLocalizedString("pending orders", bundle: bundle, comment: "")
      }

      /// en translation: Personal Information
      ///
      /// Locales: en
      static func personalInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("personalInformation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "personalInformation"
        }

        return NSLocalizedString("personalInformation", bundle: bundle, comment: "")
      }

      /// en translation: Phone
      ///
      /// Locales: en
      static func phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "phone"
        }

        return NSLocalizedString("phone", bundle: bundle, comment: "")
      }

      /// en translation: Please check your device has internet connection and try again.
      ///
      /// Locales: en
      static func no_internet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no_internet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no_internet"
        }

        return NSLocalizedString("no_internet", bundle: bundle, comment: "")
      }

      /// en translation: Please connect your stripe account first to start selling product on app
      ///
      /// Locales: en
      static func pleaseConnectStripe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please connect stripe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please connect stripe"
        }

        return NSLocalizedString("please connect stripe", bundle: bundle, comment: "")
      }

      /// en translation: Please enter
      ///
      /// Locales: en
      static func pleaseEnter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please enter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please enter"
        }

        return NSLocalizedString("please enter", bundle: bundle, comment: "")
      }

      /// en translation: Please enter OTP sent to your email:
      ///
      /// Locales: en
      static func pleaseEnterOtp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please enter otp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please enter otp"
        }

        return NSLocalizedString("please enter otp", bundle: bundle, comment: "")
      }

      /// en translation: Please enter minimum 50 characters for product description
      ///
      /// Locales: en
      static func please_enter_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_enter_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_enter_description"
        }

        return NSLocalizedString("please_enter_description", bundle: bundle, comment: "")
      }

      /// en translation: Please enter valid card details
      ///
      /// Locales: en
      static func enterValidCardDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("enter valid card details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "enter valid card details"
        }

        return NSLocalizedString("enter valid card details", bundle: bundle, comment: "")
      }

      /// en translation: Please enter valid email address
      ///
      /// Locales: en
      static func pleaseEnterValidEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please enter valid email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please enter valid email"
        }

        return NSLocalizedString("please enter valid email", bundle: bundle, comment: "")
      }

      /// en translation: Please provide shipping information
      ///
      /// Locales: en
      static func pleaseFillShippingInformations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please fill shipping informations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please fill shipping informations"
        }

        return NSLocalizedString("please fill shipping informations", bundle: bundle, comment: "")
      }

      /// en translation: Please provide your valuable feedback for this seller this will helps seller to impove their products/services
      ///
      /// Locales: en
      static func pleaseProvideFeedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please provide feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please provide feedback"
        }

        return NSLocalizedString("Please provide feedback", bundle: bundle, comment: "")
      }

      /// en translation: Please select product image before saving product
      ///
      /// Locales: en
      static func please_select_image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please_select_image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please_select_image"
        }

        return NSLocalizedString("please_select_image", bundle: bundle, comment: "")
      }

      /// en translation: Please select shipping type
      ///
      /// Locales: en
      static func pleaseSelectShippingType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please select shipping type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please select shipping type"
        }

        return NSLocalizedString("please select shipping type", bundle: bundle, comment: "")
      }

      /// en translation: Please select valid
      ///
      /// Locales: en
      static func pleaseSelect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("please select", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "please select"
        }

        return NSLocalizedString("please select", bundle: bundle, comment: "")
      }

      /// en translation: Please setup mail account in Mail app and try again
      ///
      /// Locales: en
      static func mail_error_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mail_error_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mail_error_message"
        }

        return NSLocalizedString("mail_error_message", bundle: bundle, comment: "")
      }

      /// en translation: Preferred Bank:
      ///
      /// Locales: en
      static func preferredBank(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("preferred bank", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "preferred bank"
        }

        return NSLocalizedString("preferred bank", bundle: bundle, comment: "")
      }

      /// en translation: Preferred Card:
      ///
      /// Locales: en
      static func preferredCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("preferred card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "preferred card"
        }

        return NSLocalizedString("preferred card", bundle: bundle, comment: "")
      }

      /// en translation: Price
      ///
      /// Locales: en
      static func price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "price"
        }

        return NSLocalizedString("price", bundle: bundle, comment: "")
      }

      /// en translation: Primary card
      ///
      /// Locales: en
      static func primaryCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("primary card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "primary card"
        }

        return NSLocalizedString("primary card", bundle: bundle, comment: "")
      }

      /// en translation: Print Shipping Label
      ///
      /// Locales: en
      static func printShippingLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("print shipping label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "print shipping label"
        }

        return NSLocalizedString("print shipping label", bundle: bundle, comment: "")
      }

      /// en translation: Privacy Policy
      ///
      /// Locales: en
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("privacy policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "privacy policy"
        }

        return NSLocalizedString("privacy policy", bundle: bundle, comment: "")
      }

      /// en translation: Product
      ///
      /// Locales: en
      static func product(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("product", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "product"
        }

        return NSLocalizedString("product", bundle: bundle, comment: "")
      }

      /// en translation: Purchased
      ///
      /// Locales: en
      static func purchased(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchased", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "purchased"
        }

        return NSLocalizedString("purchased", bundle: bundle, comment: "")
      }

      /// en translation: Purchased Items
      ///
      /// Locales: en
      static func purchasedItems(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchased items", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "purchased items"
        }

        return NSLocalizedString("purchased items", bundle: bundle, comment: "")
      }

      /// en translation: Re-Print Shipping Label
      ///
      /// Locales: en
      static func rePrintShippingLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("re-print shipping label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "re-print shipping label"
        }

        return NSLocalizedString("re-print shipping label", bundle: bundle, comment: "")
      }

      /// en translation: Red,Green,Blue,Orange,Purple,White,Black,Blue,Navy Blue,Dark Green
      ///
      /// Locales: en
      static func color_array(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("color_array", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "color_array"
        }

        return NSLocalizedString("color_array", bundle: bundle, comment: "")
      }

      /// en translation: Remember for future purchases
      ///
      /// Locales: en
      static func rememberForFuturePurchases(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remember for future purchases", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "remember for future purchases"
        }

        return NSLocalizedString("remember for future purchases", bundle: bundle, comment: "")
      }

      /// en translation: Remember password?
      ///
      /// Locales: en
      static func rememberPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("remember password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "remember password"
        }

        return NSLocalizedString("remember password", bundle: bundle, comment: "")
      }

      /// en translation: Report
      ///
      /// Locales: en
      static func report(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("report", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "report"
        }

        return NSLocalizedString("report", bundle: bundle, comment: "")
      }

      /// en translation: Resend OTP
      ///
      /// Locales: en
      static func resend_OTP(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resend_OTP", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resend_OTP"
        }

        return NSLocalizedString("resend_OTP", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save"
        }

        return NSLocalizedString("save", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en
      static func select(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select"
        }

        return NSLocalizedString("select", bundle: bundle, comment: "")
      }

      /// en translation: Select Category
      ///
      /// Locales: en
      static func select_category(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_category"
        }

        return NSLocalizedString("select_category", bundle: bundle, comment: "")
      }

      /// en translation: Select Shipping Type
      ///
      /// Locales: en
      static func selectShippingType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select shipping type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select shipping type"
        }

        return NSLocalizedString("select shipping type", bundle: bundle, comment: "")
      }

      /// en translation: Select Size
      ///
      /// Locales: en
      static func select_size(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select_size", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select_size"
        }

        return NSLocalizedString("select_size", bundle: bundle, comment: "")
      }

      /// en translation: Select from Photo Library
      ///
      /// Locales: en
      static func selectFromPhotoLibrary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select from Photo Library", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select from Photo Library"
        }

        return NSLocalizedString("Select from Photo Library", bundle: bundle, comment: "")
      }

      /// en translation: Select saved address
      ///
      /// Locales: en
      static func selectSavedAddress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("select saved address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "select saved address"
        }

        return NSLocalizedString("select saved address", bundle: bundle, comment: "")
      }

      /// en translation: Sell
      ///
      /// Locales: en
      static func sell(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sell"
        }

        return NSLocalizedString("sell", bundle: bundle, comment: "")
      }

      /// en translation: Service Fee
      ///
      /// Locales: en
      static func serviceFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("service fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "service fee"
        }

        return NSLocalizedString("service fee", bundle: bundle, comment: "")
      }

      /// en translation: Set as primary card
      ///
      /// Locales: en
      static func setPrimaryCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("set primary card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "set primary card"
        }

        return NSLocalizedString("set primary card", bundle: bundle, comment: "")
      }

      /// en translation: Setup Apple Pay
      ///
      /// Locales: en
      static func setupApplePay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("setup apple pay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "setup apple pay"
        }

        return NSLocalizedString("setup apple pay", bundle: bundle, comment: "")
      }

      /// en translation: Setup Closet
      ///
      /// Locales: en
      static func setup_closet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("setup_closet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "setup_closet"
        }

        return NSLocalizedString("setup_closet", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "share"
        }

        return NSLocalizedString("share", bundle: bundle, comment: "")
      }

      /// en translation: Shared from
      ///
      /// Locales: en
      static func shared_from(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shared_from", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shared_from"
        }

        return NSLocalizedString("shared_from", bundle: bundle, comment: "")
      }

      /// en translation: Shipped
      ///
      /// Locales: en
      static func shipped(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shipped", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shipped"
        }

        return NSLocalizedString("shipped", bundle: bundle, comment: "")
      }

      /// en translation: Shipping
      ///
      /// Locales: en
      static func shipping(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shipping", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shipping"
        }

        return NSLocalizedString("shipping", bundle: bundle, comment: "")
      }

      /// en translation: Shipping Included
      ///
      /// Locales: en
      static func shipping_included(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shipping_included", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shipping_included"
        }

        return NSLocalizedString("shipping_included", bundle: bundle, comment: "")
      }

      /// en translation: Shipping Info
      ///
      /// Locales: en
      static func shippingInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shipping info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shipping info"
        }

        return NSLocalizedString("shipping info", bundle: bundle, comment: "")
      }

      /// en translation: Shipping Info
      ///
      /// Locales: en
      static func shipping_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shipping_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shipping_info"
        }

        return NSLocalizedString("shipping_info", bundle: bundle, comment: "")
      }

      /// en translation: Shipping Type
      ///
      /// Locales: en
      static func shippingType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shipping type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shipping type"
        }

        return NSLocalizedString("shipping type", bundle: bundle, comment: "")
      }

      /// en translation: Shipping address updated successfully
      ///
      /// Locales: en
      static func addressUpdatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("address updated successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "address updated successfully"
        }

        return NSLocalizedString("address updated successfully", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up
      ///
      /// Locales: en
      static func signUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sign up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sign up"
        }

        return NSLocalizedString("sign up", bundle: bundle, comment: "")
      }

      /// en translation: Size
      ///
      /// Locales: en
      static func size(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("size", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "size"
        }

        return NSLocalizedString("size", bundle: bundle, comment: "")
      }

      /// en translation: Size(s)
      ///
      /// Locales: en
      static func sizeS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("size(s)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "size(s)"
        }

        return NSLocalizedString("size(s)", bundle: bundle, comment: "")
      }

      /// en translation: Sold
      ///
      /// Locales: en
      static func sold(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sold", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sold"
        }

        return NSLocalizedString("sold", bundle: bundle, comment: "")
      }

      /// en translation: Sold items
      ///
      /// Locales: en
      static func soldItems(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("soldItems", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "soldItems"
        }

        return NSLocalizedString("soldItems", bundle: bundle, comment: "")
      }

      /// en translation: State
      ///
      /// Locales: en
      static func state(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("state", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "state"
        }

        return NSLocalizedString("state", bundle: bundle, comment: "")
      }

      /// en translation: Stripe account linked successfully
      ///
      /// Locales: en
      static func stripeAccountLinked(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("stripe account linked", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "stripe account linked"
        }

        return NSLocalizedString("stripe account linked", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en
      static func submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "submit"
        }

        return NSLocalizedString("submit", bundle: bundle, comment: "")
      }

      /// en translation: Take a Picture
      ///
      /// Locales: en
      static func takeAPicture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Take a Picture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Take a Picture"
        }

        return NSLocalizedString("Take a Picture", bundle: bundle, comment: "")
      }

      /// en translation: Terms of Service
      ///
      /// Locales: en
      static func termsOfService(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("terms of service", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "terms of service"
        }

        return NSLocalizedString("terms of service", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en
      static func total(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("total", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "total"
        }

        return NSLocalizedString("total", bundle: bundle, comment: "")
      }

      /// en translation: Upload Photo
      ///
      /// Locales: en
      static func uploadPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("upload photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "upload photo"
        }

        return NSLocalizedString("upload photo", bundle: bundle, comment: "")
      }

      /// en translation: Verify Email
      ///
      /// Locales: en
      static func verifyEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify email"
        }

        return NSLocalizedString("verify email", bundle: bundle, comment: "")
      }

      /// en translation: Verify OTP
      ///
      /// Locales: en
      static func verifyOTP(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify OTP", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify OTP"
        }

        return NSLocalizedString("verify OTP", bundle: bundle, comment: "")
      }

      /// en translation: View Order
      ///
      /// Locales: en
      static func view_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("view_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "view_order"
        }

        return NSLocalizedString("view_order", bundle: bundle, comment: "")
      }

      /// en translation: Waiting for payment
      ///
      /// Locales: en
      static func waitingForPayment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("waiting for payment", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "waiting for payment"
        }

        return NSLocalizedString("waiting for payment", bundle: bundle, comment: "")
      }

      /// en translation: Waiting to ship
      ///
      /// Locales: en
      static func waitingToShip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("waiting to ship", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "waiting to ship"
        }

        return NSLocalizedString("waiting to ship", bundle: bundle, comment: "")
      }

      /// en translation: Weight
      ///
      /// Locales: en
      static func weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weight"
        }

        return NSLocalizedString("weight", bundle: bundle, comment: "")
      }

      /// en translation: Width
      ///
      /// Locales: en
      static func width(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("width", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "width"
        }

        return NSLocalizedString("width", bundle: bundle, comment: "")
      }

      /// en translation: Women's,Men's,Juniors,Kids,Babies
      ///
      /// Locales: en
      static func gender_array(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("gender_array", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "gender_array"
        }

        return NSLocalizedString("gender_array", bundle: bundle, comment: "")
      }

      /// en translation: XS,S,M,L,XL,XXL,XXXL,XXXXL
      ///
      /// Locales: en
      static func size_array(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("size_array", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "size_array"
        }

        return NSLocalizedString("size_array", bundle: bundle, comment: "")
      }

      /// en translation: Year
      ///
      /// Locales: en
      static func year(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("year", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "year"
        }

        return NSLocalizedString("year", bundle: bundle, comment: "")
      }

      /// en translation: You will receive
      ///
      /// Locales: en
      static func youWillReceive(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("you will receive", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "you will receive"
        }

        return NSLocalizedString("you will receive", bundle: bundle, comment: "")
      }

      /// en translation: Your user session has been expired please login again to continue using App.
      ///
      /// Locales: en
      static func session_expired(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("session_expired", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "session_expired"
        }

        return NSLocalizedString("session_expired", bundle: bundle, comment: "")
      }

      /// en translation: Zip
      ///
      /// Locales: en
      static func zip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "zip"
        }

        return NSLocalizedString("zip", bundle: bundle, comment: "")
      }

      /// en translation: ending with
      ///
      /// Locales: en
      static func endingWith(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("endingWith", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "endingWith"
        }

        return NSLocalizedString("endingWith", bundle: bundle, comment: "")
      }

      /// en translation: month
      ///
      /// Locales: en
      static func month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "month"
        }

        return NSLocalizedString("month", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}




  
//    #if os(iOS) || os(tvOS)
//    struct closet: Rswift.StoryboardResourceType, Rswift.Validatable {
//      let bundle = R.hostingBundle
//      let closetSetupCompletedVC = StoryboardViewControllerResource<ClosetSetupCompletedVC>(identifier: "ClosetSetupCompletedVC")
//      let myClosetVC = StoryboardViewControllerResource<MyClosetVC>(identifier: "MyClosetVC")
//      let name = "Closet"
//      let seeClosetVC = StoryboardViewControllerResource<SeeClosetVC>(identifier: "SeeClosetVC")
//      let setupClosetInfoVC = StoryboardViewControllerResource<SetupClosetInfoVC>(identifier: "SetupClosetInfoVC")
//      let setupClosetVC = StoryboardViewControllerResource<SetupClosetVC>(identifier: "SetupClosetVC")
//      let setupPaymentVC = StoryboardViewControllerResource<SetupPaymentVC>(identifier: "SetupPaymentVC")
//
//      func closetSetupCompletedVC(_: Void = ()) -> ClosetSetupCompletedVC? {
//        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: closetSetupCompletedVC)
//      }
//
//      func myClosetVC(_: Void = ()) -> MyClosetVC? {
//        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myClosetVC)
//      }
//
//      func seeClosetVC(_: Void = ()) -> SeeClosetVC? {
//        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: seeClosetVC)
//      }
//
//      func setupClosetInfoVC(_: Void = ()) -> SetupClosetInfoVC? {
//        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setupClosetInfoVC)
//      }
//
//      func setupClosetVC(_: Void = ()) -> SetupClosetVC? {
//        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setupClosetVC)
//      }
//
//      func setupPaymentVC(_: Void = ()) -> SetupPaymentVC? {
//        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setupPaymentVC)
//      }
//
//      static func validate() throws {
//        if UIKit.UIImage(named: "App Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'App Logo' is used in storyboard 'Closet', but couldn't be loaded.") }
//        if #available(iOS 11.0, tvOS 11.0, *) {
//        }
//        if _R.storyboard.closet().closetSetupCompletedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'closetSetupCompletedVC' could not be loaded from storyboard 'Closet' as 'ClosetSetupCompletedVC'.") }
//        if _R.storyboard.closet().myClosetVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myClosetVC' could not be loaded from storyboard 'Closet' as 'MyClosetVC'.") }
//        if _R.storyboard.closet().seeClosetVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'seeClosetVC' could not be loaded from storyboard 'Closet' as 'SeeClosetVC'.") }
//        if _R.storyboard.closet().setupClosetInfoVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setupClosetInfoVC' could not be loaded from storyboard 'Closet' as 'SetupClosetInfoVC'.") }
//        if _R.storyboard.closet().setupClosetVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setupClosetVC' could not be loaded from storyboard 'Closet' as 'SetupClosetVC'.") }
//        if _R.storyboard.closet().setupPaymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setupPaymentVC' could not be loaded from storyboard 'Closet' as 'SetupPaymentVC'.") }
//      }
//
//      fileprivate init() {}
//    }
//    #endif

   
